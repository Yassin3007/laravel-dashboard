<?php

namespace App\Http\Controllers\Dashboard;

use App\Http\Controllers\Controller;
use App\Http\Requests\{{modelName}}Request;
use App\Services\{{modelName}}Service;
use App\Models\{{modelName}};
use Illuminate\Http\Request;
use Illuminate\Http\RedirectResponse;
use Illuminate\View\View;

class {{modelName}}Controller extends Controller
{
    protected {{modelName}}Service ${{modelNameSingularLowerCase}}Service;

    public function __construct({{modelName}}Service ${{modelNameSingularLowerCase}}Service)
    {
        $this->{{modelNameSingularLowerCase}}Service = ${{modelNameSingularLowerCase}}Service;
    }

    /**
     * Display a listing of the resource.
     *
     * @return View
     */
    public function index(): View
    {
        ${{modelNamePluralLowerCase}} = $this->{{modelNameSingularLowerCase}}Service->getAllPaginated();

        return view('dashboard.{{viewPath}}.index', compact('{{modelNamePluralLowerCase}}'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return View
     */
    public function create(): View
    {
        return view('dashboard.{{viewPath}}.create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param {{modelName}}Request $request
     * @return RedirectResponse
     */
    public function store({{modelName}}Request $request): RedirectResponse
    {
        try {
            $this->{{modelNameSingularLowerCase}}Service->create($request->validated());

            return redirect()->route('{{viewPath}}.index')
                ->with('success', '{{modelName}} created successfully.');
        } catch (\Exception $e) {
            return redirect()->back()
                ->withInput()
                ->with('error', 'Error creating {{modelName}}: ' . $e->getMessage());
        }
    }

    /**
     * Display the specified resource.
     *
     * @param {{modelName}} ${{modelNameSingularLowerCase}}
     * @return View
     */
    public function show({{modelName}} ${{modelNameSingularLowerCase}}): View
    {
        return view('dashboard.{{viewPath}}.show', compact('{{modelNameSingularLowerCase}}'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param {{modelName}} ${{modelNameSingularLowerCase}}
     * @return View
     */
    public function edit({{modelName}} ${{modelNameSingularLowerCase}}): View
    {
        return view('dashboard.{{viewPath}}.edit', compact('{{modelNameSingularLowerCase}}'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param {{modelName}}Request $request
     * @param {{modelName}} ${{modelNameSingularLowerCase}}
     * @return RedirectResponse
     */
    public function update({{modelName}}Request $request, {{modelName}} ${{modelNameSingularLowerCase}}): RedirectResponse
    {
        try {
            $this->{{modelNameSingularLowerCase}}Service->update(${{modelNameSingularLowerCase}}, $request->validated());

            return redirect()->route('{{viewPath}}.index')
                ->with('success', '{{modelName}} updated successfully.');
        } catch (\Exception $e) {
            return redirect()->back()
                ->withInput()
                ->with('error', 'Error updating {{modelName}}: ' . $e->getMessage());
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param {{modelName}} ${{modelNameSingularLowerCase}}
     * @return RedirectResponse
     */
    public function destroy({{modelName}} ${{modelNameSingularLowerCase}}): RedirectResponse
    {
        try {
            $this->{{modelNameSingularLowerCase}}Service->delete(${{modelNameSingularLowerCase}});

            return redirect()->route('{{viewPath}}.index')
                ->with('success', '{{modelName}} deleted successfully.');
        } catch (\Exception $e) {
            return redirect()->back()
                ->with('error', 'Error deleting {{modelName}}: ' . $e->getMessage());
        }
    }
}
